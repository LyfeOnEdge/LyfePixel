from tkinter import ttk, Label
from .file_management import load_tk_image_from_bytes_array

close_button_bytes = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x01\x85iCCPICC Profile\x00\x00x\x9c}\x91=H\xc3P\x14\x85OS\xa5E*\x0ev\x10q\x88P\x9d\xac\x88\x8a8J\x15\x8b`\xa1\xb4\x15Zu0y\xe9\x1f4iHR\\\x1c\x05\xd7\x82\x83?\x8bU\x07\x17g]\x1d\\\x05A\xf0\x07\xc4\xc9\xd1I\xd1EJ\xbc/)\xb4\x88\xf1\xc1\xe3}\x9c\xf7\xce\xe1\xde\xfb\x00\xa1Qa\xaa\xd95\x01\xa8\x9ae\xa4\xe211\x9b[\x15\x03\xaf\x08"\x0c`\x18\xe3\x123\xf5Dz1\x03\xcf\xf5u\x0f\x1f?\xef\xa2<\xcb\xfb\xdd\x9f\xabW\xc9\x9b\x0c\xf0\x89\xc4sL7,\xe2\r\xe2\x99MK\xe7\xbcO\x1cf%I!>\'\x1e3\xa8@\xe2G\xae\xcb.\xbfq.:,\xf0\xcc\xb0\x91I\xcd\x13\xf3\x0e\xc4b\x07\xcb\x1d\xccJ\x86J<M\x1cQT\x8d\xf2\x85\xac\xcb\n\xe7-\xcej\xa5\xc6Zu\xf2\x0eCym%\xcdu\xdaC\x88c\t\t$!BF\reT`!J\xa7F\x8a\x89\x14\xdd\xc7<\xfc\x83\x8e?I.\x99\\e0r,\xa0\n\x15\x92\xe3\x07\xff\x83\xdf\xb35\x0bS\x93nR(\x06t\xbf\xd8\xf6\xc7\x08\x10\xd8\x05\x9au\xdb\xfe>\xb6\xed\xe6\t\xe0\x7f\x06\xae\xb4\xb6\xbf\xda\x00f?I\xaf\xb7\xb5\xc8\x11\xd0\xb7\r\\\\\xb75y\x0f\xb8\xdc\x01\x06\x9et\xc9\x90\x1c\xc9O[(\x14\x80\xf73\xfa\xa6\x1c\xd0\x7f\x0b\xf4\xac\xb9sk\xdd\xe3\xf4\x01\xc8\xd0\xac\x96o\x80\x83C`\xb4H\xd9\xeb\x1e}\x07;\xe7\xf6\xef\x9b\xd6\xfc~\x00\x95ir\xb5\x1cS\x7f\xb3\x00\x00\x01\xf2IDATx\x9c\xa5\x93?k\x1bA\x10\xc5\xdf\xccj\xf7\xee\xd6\x96\x0c)lH\xe1&\x95!E\xc0q\xe1\xd6m\xd2\x99\x14)\xafI)}\x0bKF\x02}\x0e\x07\x0c\x06\x93"n\xee\x8f \x8d \x8d\x8a\x94wM\x9c\xfa.\x8d\x11\xb2^\x8a\xe8\x84lP\xe5\x81\x81\x85\xdd\xb7\xfb~3\xb3\xc0\xffP\x00\xa1\xb5\xf6\xc0Z\xfbAU\xafD\xa4\x00@\x00\x14\x91RU\xaf\x83 8\x0f\xc3\xf0PDv\x00\x184b\x11\xf1\xce\xb9#U\xfd\xda\x88\xb6\xa51\xe6&\x8a\xa2cU\xddk.\t\x9dsG"\xf2\xb39\xd4\xeb\xf5\x98$\t\x8b\xa2`Q\x14L\x92\x84\xbd^\x8f\x1b\x8ef\xde\xfb\x13Um\xc3Z{\xb0\xf9r\x96e\xdc\x16y\x9eSD\x1a\'\xb7\xde\xfb7\n\xe0\xfdr\xb9\xfc\x04\x00Y\x96\xc1{\x8f\xd1h\x84\xba\xae\x1bD\xd4u\x8d\xf1x\x8c(\x8a\x90e\x19\x00\xe0\xf1\xf1\xf1#\xc9S\xa8\xeaUc\x9b$\x87\xc3!\x010\x8ecVU\xc5\xaa\xaa\x18\xc71\x01p0\x18\x90\xe4\x1a\xc7\x18\xf3\rM\xb5\x93$!\xc9\'\x828\x8e\x9f\xac\xab\xaa"I\xa6iJ\x00T\xd5\xdfh\xd8\x8b\xa2X\xb3n^\xf2\\L\x92eY\xae\xf7\x14/\r\x11)_\x80p\x0fU\xbd\xde,b\xbf\xdf\xdfZ\xc4\x8b\x8b\x0b\x92d\xb7\xdb%\x00Zk\xbf#\x08\x82\xf3\x86\'\xcfsN\xa7S\x0e\x06\x83\'\xccUU\xf1\xf2\xf2\x92\xd3\xe9\x94\x93\xc9d\xcd\xdfn\xb7\xbf \x0c\xc3Cc\xcc\xcdj\xc2\x98\xe7\xf9\xd6A\xda\x14;\xe7\xeevww\xdfBDv\xa2(:\x16\x91\xd9\xe6(\xa7i\xca\xb2,Y\x96%\xd34]\xdb^\xf5\xffW\xa7\xd39k\xb5Z\xaf\x00\xc0\xa8\xea\x9e\xf7\xfe\xc4\x18s\xfb\xfc\xf3<O\xe7\xdc]\xa7\xd39s\xce\xed\x03\xb0\xb2j\x86QU\x1f\x04\xc1>\x80\xd3\xf9|\xfe\x99\xe4\xbb\xe5r\xf9\x1a\x00T\xf5\x8f1f\x16\x86\xe15\xc9\x1f\x0f\x0f\x0f\xf7\x8b\xc5\xe2/\x80\xc5?\xfa\x8a\xa5\x11\xdbP\xd0\x87\x00\x00\x00\x00IEND\xaeB`\x82'






class exitButton(Label):
	def __init__(self, *args, **kwargs):
		self.command = kwargs.pop("command") if kwargs.get("command") else None        	
		self.image = kwargs.get("image")

		Label.__init__(self, *args, **kwargs)
		self.bind('<Button-1>', self.on_click)

	#Use callback when our makeshift "button" clicked
	def on_click(self, event=None):
		if self.command:
			self.command()

	#Function to update the button's set command
	def setcommand(self,command):
		self.command = command

	#Function to set the button's image
	def setimage(self,image):
		self.configure(image=image)
		self.image = image

	#Function to set the button's text
	def settext(self,text):
		self.configure(text=text)

class TopBar(ttk.Frame):
	def __init__(self, *args, **kwargs):
		ttk.Frame.__init__(self, *args, *kwargs, style = "TLabel")
		self.grip = ttk.Label(self, font = "Bold")
		self.grip.configure(anchor = "center")
		self.grip.pack(side = "left", fill="both", expand = True)
		self.pack(side = "top", fill = "x", padx = 2, pady = 2)
		bind_move_window(self.grip)
		bind_move_window(self)

	def set_exit_function(self, exit_function):
		self.exit_function = exit_function
		exit_img = load_tk_image_from_bytes_array(close_button_bytes)
		exit_button = exitButton(self, image = exit_img, command = self.exit, background = "#888888")
		exit_button.pack(side = "right")

	def set_title(self, title):
		self.grip.configure(text = title)

	def exit(self):
		if self.exit_function:
			self.exit_function()

class bind_move_window:
	"""pass a widget to bind it to click-and-drag the whole window
	widget must have 'window' attribute in reference to the widget's parent toplevel or root"""
	def __init__(self, widget):
		self.widget = widget
		self.window = widget.winfo_toplevel()
		self.widget.bind("<ButtonPress-1>", self.start_move)
		self.widget.bind("<ButtonRelease-1>", self.stop_move)
		self.widget.bind("<B1-Motion>", self.do_move)

	def start_move(self, event):
		self.x = event.x
		self.y = event.y

	def stop_move(self, event):
		self.x = None
		self.y = None

	def do_move(self, event):
		deltax = event.x - self.x
		deltay = event.y - self.y
		x = self.window.winfo_x() + deltax
		y = self.window.winfo_y() + deltay
		self.window.geometry(f"+{x}+{y}")